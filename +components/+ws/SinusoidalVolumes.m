% Sinusoidal Compression and Expansion Volumes

classdef SinusoidalVolumes < handle
    properties (Constant)
        defaultParams = struct(        ...
            "frequency", 66.6667,      ...
            "phaseAngle", 90,          ...
            "V_swept_c", 1.128e-4,     ...
            "V_clearance_c", 4.68e-5,  ...
            "R_c", Inf,                ...
            "W_parasitic_c", 0,        ...
            "V_swept_e", 1.128e-4,     ...
            "V_clearance_e", 1.68e-5,  ...
            "R_e", Inf,                ...
            "W_parasitic_e", 0,        ...
            "Q_parasitic_e", 0         ...
        )
    end

    properties (SetAccess = private)
        freq (1,1) double
        V_swept_c (1,1) double
        V_swept_e (1,1) double
        V_clearance_c (1,1) double
        V_clearance_e (1,1) double
        R_c (1,1) double
        R_e (1,1) double
        radPhaseAngle (1,1) double
        omega (1,1) double
        W_parasitic_c (1,1) double
        W_parasitic_e (1,1) double
        Q_parasitic_e (1,1) double
        isConverged (1,1) logical = true
    end

    methods
        function obj = SinusoidalVolumes(params)
            obj.freq = params.frequency;
            obj.omega = 2 * pi * params.frequency;  % angular velocity (rad/s)
            obj.radPhaseAngle = params.phaseAngle * pi / 180;  % convert degrees to radians
            obj.V_swept_c = params.V_swept_c;
            obj.V_swept_e = params.V_swept_e;
            obj.V_clearance_c = params.V_clearance_c;
            obj.V_clearance_e = params.V_clearance_e;
            if ~isnumeric(params.R_c) && params.R_c == "Inf"
                obj.R_c = Inf;
            else
                obj.R_c = params.R_c;
            end
            if ~isnumeric(params.R_e) && params.R_e == "Inf"
                obj.R_e = Inf;
            else
                obj.R_e = params.R_e;
            end
            obj.W_parasitic_c = params.W_parasitic_c;
            obj.W_parasitic_e = params.W_parasitic_e;
            obj.Q_parasitic_e = params.Q_parasitic_e;
        end

        function [V_c, dVc_dt, V_e, dVe_dt] = values(obj, t)
            theta = obj.omega * t;  % rotation (rad)

            V_c = obj.V_clearance_c + 0.5 * obj.V_swept_c * (1 + cos(theta));
            V_e = obj.V_clearance_e + 0.5 * obj.V_swept_e * (1 + cos(theta + obj.radPhaseAngle));

            dVc_dt = -0.5 * obj.V_swept_c * sin(theta) * obj.omega;
            dVe_dt = -0.5 * obj.V_swept_e * sin(theta + obj.radPhaseAngle) * obj.omega;
        end

        function firstCallUpdate(obj, engine)
            % (Not required for this model)
        end

        function update(obj, engine)
            % (Not required for this model)
        end

        function lastCallUpdate(obj, engine)
            % (Not required for this model)
        end
    end

    methods (Static)
        function getParams = createUI(gridLayout, params)
            inputs = containers.Map;
            createPanel = @StirlingEngineApp.createInputPanel;
            createInput = @StirlingEngineApp.createNumericInput;

            gridLayout.ColumnWidth = {"fit", "fit", "fit"};
            gridLayout.RowHeight = {"fit"};
            leftGrid = createPanel(gridLayout, "Common Parameters");
            middleGrid = createPanel(gridLayout, "Compression Space");
            rightGrid = createPanel(gridLayout, "Expansion Space");

            inputs("frequency") = createInput(  ...
                leftGrid,                       ...
                "Label", "Frequency",           ...
                "Units", "Hz",                  ...
                "Value", params.frequency,      ...
                "LowerLimit", 0                 ...
            );
            inputs("phaseAngle") = createInput(  ...
                leftGrid,                        ...
                "Label", "Phase Angle",          ...
                "Units", "deg",                  ...
                "Value", params.phaseAngle,      ...
                "LowerLimit", 0,                 ...
                "UpperLimit", 360                ...
            );

            inputs("V_swept_c") = createInput(  ...
                middleGrid,                     ...
                "Label", "Swept Volume",        ...
                "Units", "m^3",                 ...
                "Value", params.V_swept_c,      ...
                "LowerLimit", 0,                ...
                "LowerLimitInclusive", "off"    ...
            );
            inputs("V_clearance_c") = createInput(  ...
                middleGrid,                         ...
                "Label", "Clearance Volume",        ...
                "Units", "m^3",                     ...
                "Value", params.V_clearance_c,      ...
                "LowerLimit", 0                     ...
            );
            inputs("R_c") = createInput(        ...
                middleGrid,                     ...
                "Label", "Thermal Resistance",  ...
                "Units", "K/W",                 ...
                "Value", params.R_c,            ...
                "LowerLimit", 0                 ...
            );
            inputs("W_parasitic_c") = createInput(     ...
                middleGrid,                            ...
                "Label", "Parasitic Mechanical Loss",  ...
                "Units", "W",                          ...
                "Value", params.W_parasitic_c,         ...
                "LowerLimit", 0                        ...
            );

            inputs("V_swept_e") = createInput(  ...
                rightGrid,                      ...
                "Label", "Swept Volume",        ...
                "Units", "m^3",                 ...
                "Value", params.V_swept_e,      ...
                "LowerLimit", 0,                ...
                "LowerLimitInclusive", "off"    ...
            );
            inputs("V_clearance_e") = createInput(  ...
                rightGrid,                          ...
                "Label", "Clearance Volume",        ...
                "Units", "m^3",                     ...
                "Value", params.V_clearance_e,      ...
                "LowerLimit", 0                     ...
            );
            inputs("R_e") = createInput(        ...
                rightGrid,                      ...
                "Label", "Thermal Resistance",  ...
                "Units", "K/W",                 ...
                "Value", params.R_e,            ...
                "LowerLimit", 0                 ...
            );
            inputs("W_parasitic_e") = createInput(     ...
                rightGrid,                             ...
                "Label", "Parasitic Mechanical Loss",  ...
                "Units", "W",                          ...
                "Value", params.W_parasitic_e,         ...
                "LowerLimit", 0                        ...
            );
            inputs("Q_parasitic_e") = createInput(  ...
                rightGrid,                          ...
                "Label", "Parasitic Thermal Loss",  ...
                "Units", "W",                       ...
                "Value", params.Q_parasitic_e,      ...
                "LowerLimit", 0                     ...
            );

            getParams = @getParamsFunc;
            function r = getParamsFunc()
                r = struct;
                names = keys(inputs);
                for i = 1:length(names)
                    name = names{i};
                    nestedName = strsplit(name, ".");
                    currentValue = inputs(name).Value;
                    r = setfield(r, nestedName{:}, currentValue);
                end
            end
        end
    end
end
