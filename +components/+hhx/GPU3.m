% GPU-3 Hot Heat Exchanger
%
% This model of the GPU-3 hot heat exchanger assumes that T_hot is the hottest
% tube temperature and models the combustion system with an efficiency.

classdef GPU3 < handle
    properties (Constant)
        defaultParams = struct(  ...
            "L_total", 0.2423,   ... %m, total length of tube
            "L_htr", 0.1554,     ... %m, heat transfer length of tube
            "R_tc", 0.0762,      ... %m, radius on which tubes are placed
            "D_outer", 0.00483,  ... %m, outer tube diameter
            "D_inner", 0.00302,  ... %m, inner tube diameter
            "roughness", 1e-5,   ... %m, roughness on internal tube surface
            "N_total", 40,       ... %-, total number of tubes
            "vol_h", 1e-6,       ... %m^3, header volume of heat exchanger
            "eta_comb", 0.8,     ... %combustor efficiency
            "W_parasitic", 0     ...
        )
    end

    properties (SetAccess = private)
        % Interface Properties
        vol (1,1) double {mustBeReal}
        W_parasitic (1,1) double {mustBeReal}
        Q_parasitic (1,1) double {mustBeReal}
        DP (1,:) double {mustBeReal}

        % Internal Properties
        R_hyd (1,1) double
        L (1,1) double
        L_htr (1,1) double
        R_tc (1,1) double
        D_o (1,1) double
        D_i (1,1) double
        N_t (1,1) double
        roughness (1,1) double
        vol_h (1,1) double
        eta_comb (1,1) double
        DT (1,1) double
        
        rpt (19,1) double

        Q_dot_hhx (1,1) double
        Q_dot_b_loss (1,1) double
        Q_dot_r_loss (1,1) double
    end

    methods
        function obj = GPU3(params)
            obj.L = params.L_total;
            obj.L_htr = params.L_htr;
            obj.R_tc = params.R_tc;
            obj.D_o = params.D_outer;
            obj.D_i = params.D_inner;
            obj.N_t = params.N_total;
            obj.vol_h = params.vol_h;
            obj.eta_comb = params.eta_comb;
            obj.W_parasitic = params.W_parasitic;
            obj.Q_parasitic = 0;

            % Calculate fluid volume inside tubes
            obj.vol = obj.L * obj.N_t * pi * obj.D_i^2 / 4+obj.vol_h;
        end

        function firstCallUpdate(obj, engine)
            % Provide an initial guess value for DT (before engine states are available)
            obj.DT = 10;
        end

        function update(obj, engine)
            % Update the value for DT based on the current engine state

            % Get total heat transfer rate
            Q_dot_e = 0;
            if ~isinf(engine.ws.R_e)
                Q_dot_e = engine.freq * trapz(                             ...
                    engine.stateValues.time,                               ...
                    (engine.T_l - engine.stateValues.T_e) / engine.ws.R_e  ...
                );
            end
            Q_dot_l = engine.freq * trapz(  ...
                engine.stateValues.time,    ...
                engine.stateValues.Q_dot_l  ...
            );
            obj.Q_dot_hhx = Q_dot_e + Q_dot_l;

            % Calculate average mass flow rate in the hxr
            m_dot_avgs = 0.5 * (engine.stateValues.m_dot_rl + engine.stateValues.m_dot_le);
            m_dot_avg = engine.freq * trapz(  ...
                engine.stateValues.time,      ...
                abs(m_dot_avgs)               ...
            );

            % Calculate average fluid properties in the HHX
            fluidProps = engine.fluid.allProps(engine.T_l, engine.P_ave);
            C_dot_avg = fluidProps.CP * m_dot_avg;  %average capacitance rate (W/K)
            rho_g = fluidProps.rho;  %average fluid density

            % Working fluid side calculations
            %--------------------------------
            %steady flow friction and htc
            [DP_tube, htc_g] = util.tubeFlow(fluidProps, m_dot_avg/obj.N_t, obj.D_i, obj.L, obj.roughness);
            
            %get minor loss
            K_h = 4.5; %assumed total minor loss coefficient (expansion/contraction, U, and multiple bends)
            Ac_g = pi * obj.D_i^2 / 4 * obj.N_t;  %cross-sectional area for flow in tubes
            u_g_avg = m_dot_avg / (rho_g * Ac_g);  %average velocity

            DP_minor = K_h*rho_g*u_g_avg^2/2;   %minor loss
            
            DP_g = DP_tube+DP_minor;  %total steady pressure loss
            
            u_max=u_g_avg*sqrt(2);  %approximate max velocity
            [MF_DP, MF_h] = util.oscillatingFlow(fluidProps, obj.D_i, engine.freq, u_max);  %get oscillating flow multipliers
            DP_g = MF_DP*DP_g;
            htc_g = MF_h*htc_g;
   
            obj.R_hyd = DP_g / (m_dot_avg / rho_g);  
            
            % Combustion gas side calculations
            %--------------------------------
            Q_dot_in = (obj.Q_dot_hhx + engine.ws.Q_parasitic_e);  %total heat transfer to engine less combustion system loss
            obj.Q_parasitic = Q_dot_in*(1/obj.eta_comb - 1);  %parasitic heat transfer from combustion system

            UA_int = obj.N_t*pi*obj.D_i*htc_g*obj.L_htr;
            NTU_int = UA_int/C_dot_avg;  %NTU of heat exchanger from metal to working fluid
            eff_int = 1-exp(-NTU_int); %eff of heat exchanger from metal to working fluid
            obj.DT = obj.Q_dot_hhx/C_dot_avg * (1 / eff_int - 1);  %approach temperature - relative to T_hot, the tube temp.
            
            %parameters in report
            obj.rpt(1) = DP_g;
            obj.rpt(2) = m_dot_avg;
            obj.rpt(3) = obj.vol;
        end

        function lastCallUpdate(obj, engine)
            % Update pressure drop values
            m_dot_avgs = 0.5 * (engine.stateValues.m_dot_rl + engine.stateValues.m_dot_le);
            rho = engine.fluid.density(engine.T_l, engine.stateValues.P);
            V_dot = m_dot_avgs ./ rho;
            obj.DP = obj.R_hyd * V_dot;
        end
        
        function lines = report(obj)
            % Return a string array that will be included in the engine report
            % (This function is optional)
            lines = [
                sprintf("Gas side pressure drop = %.4f Pa", obj.rpt(1)),
                sprintf("average mass flow rate = %.4f kg/s", obj.rpt(2)),
                sprintf("hot heat exchanger void volume = %.4f m^3", obj.rpt(3))
            ];
        end
        
    end

    methods (Static)
        function getParams = createUI(gridLayout, params)
            inputs = containers.Map;
            createPanel = @StirlingEngineApp.createInputPanel;
            createInput = @StirlingEngineApp.createNumericInput;

            gridLayout.ColumnWidth = {"fit"};
            gridLayout.RowHeight = "fit";

            panelGrid = createPanel(gridLayout, "Parameters");
            inputs("L_total") = createInput(      ...
                panelGrid,                        ...
                "Label", "Total Length of Tube",  ...
                "Units", "m",                     ...
                "Value", params.L_total,          ...
                "LowerLimit", 0,                  ...
                "LowerLimitInclusive", "off"      ...
            );
            inputs("L_htr") = createInput(                ...
                panelGrid,                                ...
                "Label", "Heat Transfer Length of Tube",  ...
                "Units", "m",                             ...
                "Value", params.L_htr,                    ...
                "LowerLimit", 0,                          ...
                "LowerLimitInclusive", "off"              ...
            );
            inputs("R_tc") = createInput(                     ...
                panelGrid,                                    ...
                "Label", "Radius on Which Tubes Are Placed",  ...
                "Units", "m",                                 ...
                "Value", params.R_tc,                         ...
                "LowerLimit", 0,                              ...
                "LowerLimitInclusive", "off"                  ...
            );
            inputs("D_outer") = createInput(     ...
                panelGrid,                       ...
                "Label", "Outer Tube Diameter",  ...
                "Units", "m",                    ...
                "Value", params.D_outer,         ...
                "LowerLimit", 0,                 ...
                "LowerLimitInclusive", "off"     ...
            );
            inputs("D_inner") = createInput(     ...
                panelGrid,                       ...
                "Label", "Inner Tube Diameter",  ...
                "Units", "m",                    ...
                "Value", params.D_inner,         ...
                "LowerLimit", 0,                 ...
                "LowerLimitInclusive", "off"     ...
            );
            inputs("roughness") = createInput(               ...
                panelGrid,                                   ...
                "Label", "Tube Internal Surface Roughness",  ...
                "Units", "m",                                ...
                "Value", params.roughness,                   ...
                "LowerLimit", 0,                             ...
                "LowerLimitInclusive", "off"                 ...
            );
            inputs("N_total") = createInput(  ...
                panelGrid,                    ...
                "Label", "Number of Tubes",   ...
                "Value", params.N_total,      ...
                "IsInteger", true,            ...
                "LowerLimit", 1               ...
            );
            inputs("vol_h") = createInput(    ...
                panelGrid,                    ...
                "Label", "Header Volume",     ...
                "Units", "m^3",               ...
                "Value", params.vol_h,        ...
                "LowerLimit", 0,              ...
                "LowerLimitInclusive", "off"  ...
            );
            inputs("eta_comb") = createInput(     ...
                panelGrid,                        ...
                "Label", "Combustor Efficiency",  ...
                "Value", params.eta_comb,         ...
                "LowerLimit", 0,                  ...
                "LowerLimitInclusive", "off",     ...
                "UpperLimit", 1                   ...
            );
            inputs("W_parasitic") = createInput(       ...
                panelGrid,                             ...
                "Label", "Parasitic Mechanical Loss",  ...
                "Units", "W",                          ...
                "Value", params.W_parasitic,           ...
                "LowerLimit", 0                        ...
            );

            getParams = @getParamsFunc;
            function r = getParamsFunc()
                r = struct;
                names = keys(inputs);
                for i = 1:length(names)
                    name = names{i};
                    nestedName = strsplit(name, ".");
                    currentValue = inputs(name).Value;
                    r = setfield(r, nestedName{:}, currentValue);
                end
            end
        end
    end
end
